queries:
  - name: "pgdb__columns__data"
    query: |
      SELECT * FROM (
        SELECT 
          'postgres<db-name>' AS PKEY,
          1 AS CON_ID, 
          UPPER(c.table_schema) AS OWNER, 
          UPPER(c.table_name) AS TABLE_NAME, 
          UPPER(c.column_name) AS COLUMN_NAME, 
          UPPER(c.data_type) AS DATA_TYPE, 
          c.character_maximum_length AS DATA_LENGTH, 
          c.numeric_precision AS DATA_PRECISION, 
          c.numeric_scale AS DATA_SCALE, 
          c.is_nullable AS NULLABLE, 
          'Postgres' AS DMA_SOURCE_ID, 
          NULL AS DMA_MANUAL_ID
        FROM 
          information_schema.columns c
        JOIN 
          pg_class cl ON cl.relname = c.table_name 
        JOIN 
          pg_namespace ns ON ns.oid = cl.relnamespace
        LEFT JOIN 
          pg_inherits inh ON inh.inhrelid = cl.oid
        WHERE 
          c.table_schema NOT IN ('pg_catalog', 'information_schema') and UPPER(c.column_name) != 'ROWID'
          AND inh.inhrelid IS NULL
        ) a
      WHERE 1=1 <owner_filter>;
# "select 'postgres<db-name>' AS PKEY,1 AS CON_ID, UPPER(table_schema) as OWNER, UPPER(table_name) as TABLE_NAME, UPPER(column_name) as COLUMN_NAME, UPPER(data_type) as DATA_TYPE, character_maximum_length as DATA_LENGTH, numeric_precision as DATA_PRECISION, numeric_scale as DATA_SCALE, is_nullable as NULLABLE, 'Postgres' as DMA_SOURCE_ID, NULL as DMA_MANUAL_ID  from information_schema.columns where table_schema not in ('pg_catalog','information_schema');"
  - name: "pgdb__instances__data"
    query: "select 'postgres<db-name>' AS PKEY,1 AS CON_ID;"
  - name: "pgdb__views__data"
    query: "select 'postgres<db-name>' AS PKEY,1 AS CON_ID, UPPER(table_schema) OWNER, UPPER(table_name) VIEW_NAME, 'Postgres' as DMA_SOURCE_ID, NULL as DMA_MANUAL_ID from information_schema.views where table_schema not in ('pg_catalog','information_schema');"
  - name: "pgdb__dbobjectnames__data" 
    query: | 
      SELECT * FROM (
        SELECT
          'postgres<db-name>' AS PKEY,
          1 AS CON_ID,
          UPPER(n.nspname) AS OWNER,          -- Schema containing the object
          UPPER(c.relname) AS OBJECT_NAME,    -- Object name
          CASE 
              WHEN c.relkind = 'r' AND i.inhrelid IS NOT NULL THEN 'TABLE PARTITION'  -- Table partition
              WHEN c.relkind = 'r' THEN 'TABLE'           -- Regular table
              WHEN c.relkind = 'v' THEN 'VIEW'            -- View
              WHEN c.relkind = 'm' THEN 'MATERIALIZED VIEW'  
              WHEN (c.relkind = 'i' or c.relkind = 'I') and i.inhrelid is NULL THEN 'INDEX'           -- Index
              WHEN c.relkind = 'S' THEN 'SEQUENCE'        -- Sequence
              WHEN c.relkind = 't' THEN 'TOAST TABLE'     -- TOAST table (internal)
              WHEN c.relkind = 'p' THEN 'PARTITIONED TABLE' -- Partitioned table
              ELSE c.relkind::text                        -- Other object types
          END AS OBJECT_TYPE,
          'Postgres' AS DMA_SOURCE_ID,
          NULL AS DMA_MANUAL_ID
      FROM
          pg_class c
      LEFT JOIN
          pg_namespace n ON n.oid = c.relnamespace
      LEFT JOIN
          pg_inherits i ON c.oid = i.inhrelid  -- Join with pg_inherits to identify partitions
      LEFT JOIN
          pg_index ix ON ix.indexrelid = c.oid and i.inhrelid is NULL  -- Join with pg_index to identify indexes
      LEFT JOIN
          pg_class p ON p.oid = ix.indrelid     -- Join with pg_class to get the parent table of the index
      WHERE
          c.relkind IN ('r', 'v', 'm', 'i', 'S', 't', 'p', 'I')  -- Filter desired object types
          --AND NOT((c.relkind = 'i' ) and c.oid is NOT NULL)
          AND n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')  -- Exclude system schemas
      UNION ALL
      SELECT
          'postgres<db-name>' AS PKEY,1 AS CON_ID,
          UPPER(n.nspname) AS OWNER,
          UPPER(p.proname) AS OBJECT_NAME, -- Procedures and functions
          CASE p.prokind 
              WHEN 'p' THEN 'PROCEDURE'
              WHEN 'f' THEN 'FUNCTION'
          END AS OBJECT_TYPE,
         'Postgres' AS DMA_SOURCE_ID,
          NULL AS DMA_MANUAL_ID
      FROM
          pg_proc p
      JOIN
          pg_namespace n ON p.pronamespace = n.oid
      WHERE
          p.prolang = (SELECT oid FROM pg_language WHERE lanname = 'plpgsql')  -- Filter for PL/pgSQL
          AND n.nspname NOT IN ('pg_catalog', 'information_schema')  -- Exclude system schemas
      UNION ALL
        SELECT 
          'postgres<db-name>' AS PKEY,1 AS CON_ID,
          UPPER(n.nspname) AS OWNER,
          UPPER(t.tgname) AS OBJECT_NAME,
          'TRIGGER' AS OBJECT_TYPE,
          'Postgres' as DMA_SOURCE_ID, NULL as DMA_MANUAL_ID
        FROM pg_trigger AS t
        JOIN pg_class AS c ON t.tgrelid = c.oid
        JOIN pg_namespace AS n ON c.relnamespace = n.oid
        WHERE tgisinternal = false  and n.nspname not in ( 'public', 'information_schema')
      ORDER BY
          3,4) a where object_type!='i'  and object_name not like '%_ROWID%' <owner_filter>;
  - name: "pgdb__sourcecodedetailed__data" 
    query: | 
      SELECT * FROM (
        SELECT
            'postgres<db-name>' AS PKEY,1 AS CON_ID,
            UPPER(n.nspname) AS OWNER,
            UPPER(p.proname) AS NAME, -- Procedures and functions
            CASE p.prokind 
                WHEN 'p' THEN 'PROCEDURE'
                WHEN 'f' THEN 'FUNCTION'
            END AS TYPE,
            -- pg_get_functiondef(p.oid) AS definition,
            (SELECT COUNT(*) FROM regexp_split_to_table(pg_get_functiondef(p.oid), '\n')) AS NR_LINES, 'Postgres' as DMA_SOURCE_ID, NULL as DMA_MANUAL_ID
        FROM
            pg_proc p
        JOIN
            pg_namespace n ON p.pronamespace = n.oid
        WHERE
            p.prolang = (SELECT oid FROM pg_language WHERE lanname = 'plpgsql')  -- Filter for PL/pgSQL
            AND n.nspname NOT IN ('pg_catalog', 'information_schema')  -- Exclude system schemas
        ORDER BY
            3,4
        ) a
      WHERE 1=1 <owner_filter> ;
  - name: "pgdb__triggers__data" 
    query: | 
      SELECT * FROM (
        SELECT 
          'postgres<db-name>' AS PKEY,1 AS CON_ID,
          n.nspname AS OWNER,
          t.tgname AS trigger_name,
          -- CASE WHEN t.tgtype = 't' THEN 'ROW' ELSE 'STATEMENT' END AS trigger_type,
          t.tgrelid::regclass AS table_name,
          t.tgenabled AS status,
          'Postgres' as DMA_SOURCE_ID, NULL as DMA_MANUAL_ID
        FROM pg_trigger AS t
        JOIN pg_class AS c ON t.tgrelid = c.oid
        JOIN pg_namespace AS n ON c.relnamespace = n.oid
        WHERE tgisinternal = false  and n.nspname not in ( 'public', 'information_schema')
      ) a
      WHERE 1=1 <owner_filter> ;